buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'application'
	id 'io.spring.dependency-management' version '1.0.4.RELEASE'
	id 'org.springframework.boot' version '2.0.1.RELEASE'
	id 'org.sonarqube' version '2.6.2'
	id 'jacoco'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply from: 'liquibase.gradle'



group = 'com.to_do_app'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

def versions = [
        postgresql         : '42.2.2',
        h2                 : '1.4.197',
        liquibase          : '3.5.3',
]

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compile("org.liquibase:liquibase-core:${versions.liquibase}")
	compile("org.postgresql:postgresql:${versions.postgresql}")
	testCompile("com.h2database:h2:${versions.h2}")
	compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
	testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
	testCompile group: 'info.cukes', name: 'cucumber-core', version: '1.2.5'
	testCompile group: 'info.cukes', name: 'cucumber-spring', version: '1.2.5'
}

bootJar {
    baseName 'to_do_app'
    archiveName = "$baseName" + ".jar"
    destinationDir = file("$rootDir/build/libs")
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
	}
}

jacoco {
	toolVersion = '0.7.9' // jacocoMavenPluginVersion
	reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
	executionData(test)

	reports {
		xml.enabled = true
		csv.enabled = true
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: coverageExclusionList)
		})
	}
}

sonarqube {
	properties {
		property "sonar.projectName", "${rootProject.name}"
		property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
		property "sonar.exclusions", coverageExclusionList.join(", ")
	}
}